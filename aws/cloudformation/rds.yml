AWSTemplateFormatVersion: '2010-09-09'
Description: 'RDS PostgreSQL Database for Wish Keeper Application'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name
  
  DBName:
    Type: String
    Default: webapp_db
    Description: PostgreSQL database name
  
  DBUsername:
    Type: String
    Default: wishkeeper
    Description: Database master username
  
  DBPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Database master password (min 8 characters)
  
  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t3.large
    Description: Database instance class
  
  AllocatedStorage:
    Type: Number
    Default: 20
    MinValue: 20
    MaxValue: 1000
    Description: Database storage in GB
  
  MultiAZ:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable Multi-AZ deployment for high availability
  
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where RDS will be deployed
  
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnet IDs for RDS (minimum 2 for Multi-AZ)
  
  AllowedSecurityGroups:
    Type: ComboDelimitedList
    Description: Security group IDs allowed to access the database (ECS security group)

Conditions:
  IsProduction: !Equals [!Ref Environment, prod]

Resources:
  # DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${AWS::StackName}-subnet-group'
      DBSubnetGroupDescription: Subnet group for Wish Keeper RDS
      SubnetIds: !Ref PrivateSubnetIds
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-subnet-group'
        - Key: Environment
          Value: !Ref Environment

  # Security Group for RDS
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-rds-sg'
      GroupDescription: Security group for Wish Keeper RDS PostgreSQL
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Select [0, !Ref AllowedSecurityGroups]
          Description: Allow PostgreSQL from ECS tasks
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-rds-sg'
        - Key: Environment
          Value: !Ref Environment

  # DB Parameter Group
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      DBParameterGroupName: !Sub '${AWS::StackName}-params'
      Description: Parameter group for Wish Keeper PostgreSQL
      Family: postgres15
      Parameters:
        shared_preload_libraries: pg_stat_statements
        log_statement: all
        log_min_duration_statement: 1000  # Log queries > 1 second
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-params'
        - Key: Environment
          Value: !Ref Environment

  # Secret for DB credentials
  DBCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-db-credentials'
      Description: RDS database credentials for Wish Keeper
      SecretString: !Sub |
        {
          "username": "${DBUsername}",
          "password": "${DBPassword}",
          "engine": "postgres",
          "host": "${DBInstance.Endpoint.Address}",
          "port": 5432,
          "dbname": "${DBName}"
        }
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-credentials'
        - Key: Environment
          Value: !Ref Environment

  # RDS PostgreSQL Instance
  DBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-postgres'
      DBName: !Ref DBName
      Engine: postgres
      EngineVersion: '15.5'
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref AllocatedStorage
      MaxAllocatedStorage: 100  # Enable storage autoscaling
      StorageType: gp3
      StorageEncrypted: true
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBParameterGroupName: !Ref DBParameterGroup
      MultiAZ: !Ref MultiAZ
      PubliclyAccessible: false
      BackupRetentionPeriod: !If [IsProduction, 7, 3]
      PreferredBackupWindow: '03:00-04:00'  # 3-4 AM UTC
      PreferredMaintenanceWindow: 'sun:04:00-sun:05:00'  # Sunday 4-5 AM UTC
      EnableCloudwatchLogsExports:
        - postgresql
      DeletionProtection: !If [IsProduction, true, false]
      CopyTagsToSnapshot: true
      EnablePerformanceInsights: !If [IsProduction, true, false]
      PerformanceInsightsRetentionPeriod: !If [IsProduction, 7, 0]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-postgres'
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-high-cpu'
      AlarmDescription: Alert when RDS CPU exceeds 80%
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref DBInstance

  HighConnectionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-high-connections'
      AlarmDescription: Alert when database connections are high
      MetricName: DatabaseConnections
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref DBInstance

  LowStorageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-low-storage'
      AlarmDescription: Alert when free storage is below 2GB
      MetricName: FreeStorageSpace
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 2000000000  # 2GB in bytes
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref DBInstance

Outputs:
  DBInstanceIdentifier:
    Description: Database instance identifier
    Value: !Ref DBInstance
    Export:
      Name: !Sub '${AWS::StackName}-instance-id'

  DBEndpoint:
    Description: Database endpoint address
    Value: !GetAtt DBInstance.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-endpoint'

  DBPort:
    Description: Database port
    Value: !GetAtt DBInstance.Endpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-port'

  DBName:
    Description: Database name
    Value: !Ref DBName
    Export:
      Name: !Sub '${AWS::StackName}-name'

  DBSecurityGroupId:
    Description: Security group ID for the database
    Value: !Ref DBSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-sg-id'

  DBCredentialsSecretArn:
    Description: ARN of the Secrets Manager secret containing DB credentials
    Value: !Ref DBCredentialsSecret
    Export:
      Name: !Sub '${AWS::StackName}-secret-arn'

  DBPasswordSecretArn:
    Description: ARN for DB password secret (for ECS task definition)
    Value: !Sub '${DBCredentialsSecret}:password::'
    Export:
      Name: !Sub '${AWS::StackName}-password-secret-arn'
